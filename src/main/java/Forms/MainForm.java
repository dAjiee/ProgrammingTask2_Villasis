/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

import Sources.Audio;
import Sources.GeneratePerson;
import Sources.Person;
import Sources.QueueSystem;
import Sources.Timer;
import java.awt.BorderLayout;
import java.awt.Color;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Queue;
import java.util.Random;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 *
 * @author Alexander
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        stopButton.setEnabled(false);
        setAlwaysOnTop(true);
        this.setIconImage(new ImageIcon(MainForm.class.getResource("/images/LTOLogo.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        totalServed = new javax.swing.JLabel();
        servedW3 = new javax.swing.JLabel();
        servedW2 = new javax.swing.JLabel();
        servedW1 = new javax.swing.JLabel();
        q1 = new javax.swing.JPanel();
        q2 = new javax.swing.JPanel();
        q3 = new javax.swing.JPanel();
        stopButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        pwdCount = new javax.swing.JLabel();
        pregnantCount = new javax.swing.JLabel();
        oldManCount = new javax.swing.JLabel();
        oldWomanCount = new javax.swing.JLabel();
        womanCount = new javax.swing.JLabel();
        manCount = new javax.swing.JLabel();
        timeElapsed = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LTO Reservation System");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        totalServed.setFont(new java.awt.Font("Myanmar Text", 0, 15)); // NOI18N
        totalServed.setForeground(new java.awt.Color(255, 255, 255));
        totalServed.setText("Total Served: 0");
        getContentPane().add(totalServed, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 480, 230, -1));

        servedW3.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        servedW3.setForeground(new java.awt.Color(255, 255, 255));
        servedW3.setText("Served: 0");
        getContentPane().add(servedW3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 340, 180, 50));

        servedW2.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        servedW2.setForeground(new java.awt.Color(255, 255, 255));
        servedW2.setText("Served: 0");
        getContentPane().add(servedW2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, 180, -1));

        servedW1.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        servedW1.setForeground(new java.awt.Color(255, 255, 255));
        servedW1.setText("Served: 0");
        getContentPane().add(servedW1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 230, -1));

        q1.setOpaque(false);
        getContentPane().add(q1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, -1, -1));

        q2.setOpaque(false);
        getContentPane().add(q2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, -1, -1));

        q3.setOpaque(false);
        getContentPane().add(q3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 360, -1, -1));

        stopButton.setBorderPainted(false);
        stopButton.setContentAreaFilled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(stopButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(672, 20, 30, 40));

        playButton.setBorderPainted(false);
        playButton.setContentAreaFilled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        getContentPane().add(playButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(582, 20, 30, 40));

        pwdCount.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        pwdCount.setForeground(new java.awt.Color(255, 255, 255));
        pwdCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pwdCount.setText("0");
        getContentPane().add(pwdCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 520, 20, -1));

        pregnantCount.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        pregnantCount.setForeground(new java.awt.Color(255, 255, 255));
        pregnantCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pregnantCount.setText("0");
        getContentPane().add(pregnantCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 520, 20, -1));

        oldManCount.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        oldManCount.setForeground(new java.awt.Color(255, 255, 255));
        oldManCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        oldManCount.setText("0");
        getContentPane().add(oldManCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 520, 20, -1));

        oldWomanCount.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        oldWomanCount.setForeground(new java.awt.Color(255, 255, 255));
        oldWomanCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        oldWomanCount.setText("0");
        getContentPane().add(oldWomanCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 520, 20, -1));

        womanCount.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        womanCount.setForeground(new java.awt.Color(255, 255, 255));
        womanCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        womanCount.setText("0");
        getContentPane().add(womanCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 520, 20, -1));

        manCount.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        manCount.setForeground(new java.awt.Color(255, 255, 255));
        manCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manCount.setText("0");
        getContentPane().add(manCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 520, 20, -1));

        timeElapsed.setFont(new java.awt.Font("Myanmar Text", 0, 14)); // NOI18N
        timeElapsed.setForeground(new java.awt.Color(255, 255, 255));
        timeElapsed.setText("00:00");
        getContentPane().add(timeElapsed, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 500, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Backround.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private Audio audio = new Audio();
    private List<TimerTask> tasks = new ArrayList<>();
    private Timer timer = new Timer();
    private GeneratePerson personGenerator = new GeneratePerson();
    private QueueSystem queues = new QueueSystem();
    private Random random = new Random();
    private int w1 = 0;
    private int w2 = 0;
    private int w3 = 0;
    
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        manCount.setText("0");
        womanCount.setText("0");
        oldManCount.setText("0");
        oldWomanCount.setText("0");
        pregnantCount.setText("0");
        pwdCount.setText("0");
        
        w1 = 0;
        w2 = 0;
        w3 = 0;
        servedW1.setText("Served: " + w1);
        servedW2.setText("Served: " + w2);
        servedW3.setText("Served: " + w3);
        totalServed.setText("Total Served: " + (w1+w2+w3));
        
        stopButton.setEnabled(true);
        playButton.setEnabled(false);
        timer.start();
        audio.start();
        runAddPeople();
        startTimer();
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopButton.setEnabled(false);
        playButton.setEnabled(true);
        resetAll();
    }//GEN-LAST:event_stopButtonActionPerformed
    
    private void resetAll() {
        q1.removeAll();
        q2.removeAll();
        q3.removeAll();
        tasks.forEach(task -> task.cancel());
        queues = new QueueSystem();
        timer.reset();

        audio.stop();
    }
    
    private void repaintFrame() {
        this.revalidate();
        this.repaint();
    }

    private void startQueue(JPanel queueHolderPanel, Queue<Person> queue) {
        queueHolderPanel.removeAll();
        List<Person> persons = new ArrayList<>(queue);

        for (Person person : persons) {

            URL imageURL = MainForm.class.getResource(person.getPathToIcon());

            ImageIcon icon = new ImageIcon(imageURL);
            JLabel imageLabel = new JLabel(icon, SwingConstants.CENTER);
            
            JLabel textLabel = new JLabel(person.getName(), SwingConstants.CENTER);
            textLabel.setForeground(Color.WHITE);

            JPanel textPanel = new JPanel(new BorderLayout());
            textPanel.setOpaque(false);
            textPanel.add(textLabel);
            
            JPanel imagePanel = new JPanel();
            imagePanel.setOpaque(false);
            
            imagePanel.setLayout(new BorderLayout());
            imagePanel.add(imageLabel, BorderLayout.CENTER);
            imagePanel.add(textLabel, BorderLayout.SOUTH);

            queueHolderPanel.add(imagePanel);
        }
        repaintFrame();
    }

    private void startQ1() {
        startQueue(q1, queues.getQ1());
    }

    private void startQ2() {
        startQueue(q2, queues.getQ2());
    }

    private void startQP() {
        startQueue(q3, queues.getQP());
    }

    private void addQ1(Person person) {
        queues.addQ1(person);
        startQ1();

        TimerTask task = new TimerTask() {
            public void run() {
                w1++;
                refreshServedPerson(queues.removeQ1());
                startQ1();
            }
        };
        tasks.add(task);
        java.util.Timer timer = new java.util.Timer();
        
        int randomNumber = random.nextInt(16);
        int finalNumber = 5000 + (randomNumber * 1000);
        
        timer.schedule(task, finalNumber);
    }

    private void addQ2(Person person) {
        queues.addQ2(person);
        startQ2();

        TimerTask task = new TimerTask() {
            public void run() {
                w2++;
                refreshServedPerson(queues.removeQ2());
                startQ2();
            }
        };
        tasks.add(task);
        java.util.Timer timer = new java.util.Timer();
        
        int randomNumber = random.nextInt(16);
        int finalNumber = 5000 + (randomNumber * 1000);
        
        timer.schedule(task, finalNumber);
    }

    private void addQP(Person person) {
        queues.addQP(person);
        startQP();

        TimerTask task = new TimerTask() {
            public void run() {
                w3++;
                refreshServedPerson(queues.removeQP());
                startQP();
            }
        };
        tasks.add(task);
        java.util.Timer timer = new java.util.Timer();
        
        int randomNumber = random.nextInt(16);
        int finalNumber = 5000 + (randomNumber * 1000);
        
        timer.schedule(task, finalNumber);
    }

    private void insertToQueue(Person person) {
        if (person.getType() == Person.MAN || person.getType() == Person.WOMAN) {
            if (queues.getQ1().size() >= 5 && queues.getQ2().size() >= 5) {
                return;
            }
            if (queues.getQ1().size() - queues.getQ2().size() >= 1) {
                addQ2(person);
                return;
            } else {
                addQ1(person);
            }
        } else {
            if (queues.getQP().size() >= 5) {
                return;
            }
            addQP(person);
        }
    }

    private void runAddPeople() {
        TimerTask task = new TimerTask() {
            public void run() {
                Person person = personGenerator.generatePerson();
                insertToQueue(person);
            }
        };
        tasks.add(task);
        java.util.Timer timer = new java.util.Timer();
        timer.scheduleAtFixedRate(task, 0, 1600);
    }

    private void startTimer() {
        TimerTask task = new TimerTask() {
            public void run() {
                timeElapsed.setText(timer.getTime());
            }
        };
        tasks.add(task);
        java.util.Timer timer = new java.util.Timer();
        timer.scheduleAtFixedRate(task, 0, 1000);
    }

    private void refreshServedPerson(Person person) {
        queues.addToServedCounter(person.getType());
        
        manCount.setText(String.valueOf(queues.getServedPeople().get(Person.MAN)));
        womanCount.setText(String.valueOf(queues.getServedPeople().get(Person.WOMAN)));
        oldManCount.setText(String.valueOf(queues.getServedPeople().get(Person.OLDMAN)));
        oldWomanCount.setText(String.valueOf(queues.getServedPeople().get(Person.OLDWOMAN)));
        pregnantCount.setText(String.valueOf(queues.getServedPeople().get(Person.PREGNANT)));
        pwdCount.setText(String.valueOf(queues.getServedPeople().get(Person.PWD)));
        
        servedW1.setText("Served: " + w1);
        servedW2.setText("Served: " + w2);
        servedW3.setText("Served: " + w3);
        totalServed.setText("Total Served: " + (w1+w2+w3));
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel manCount;
    private javax.swing.JLabel oldManCount;
    private javax.swing.JLabel oldWomanCount;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel pregnantCount;
    private javax.swing.JLabel pwdCount;
    private javax.swing.JPanel q1;
    private javax.swing.JPanel q2;
    private javax.swing.JPanel q3;
    private javax.swing.JLabel servedW1;
    private javax.swing.JLabel servedW2;
    private javax.swing.JLabel servedW3;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel timeElapsed;
    private javax.swing.JLabel totalServed;
    private javax.swing.JLabel womanCount;
    // End of variables declaration//GEN-END:variables
}
